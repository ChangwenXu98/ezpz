#!/bin/bash --login

# set -euxo pipefail
#IFS=$'\n\t'

RESET="\e[0m"
BLACK="\e[1;30m"
RED="\e[1;31m"
GREEN="\e[1;32m"
YELLOW="\e[1;33m"
BLUE="\e[1;34m"
MAGENTA="\e[1;35m"
CYAN="\e[1;36m"
WHITE="\e[1;37m"

HOSTNAME=$(hostname)

# if [[ $# == 0 ]]; then
#     PBS_ENV_FILE="${HOME}/.pbsenv"
#     COBALT_ENV_FILE="${HOME}/.cobaltenv"
#     SLURM_ENV_FILE="${HOME}/.slurmenv"
# elif [[ $# == 1 ]]; then
#     PBS_ENV_FILE="$1"
# elif [[ $# == 2 ]]; then
#     PBS_ENV_FILE="$1"
#     HOSTFILE="$2"
# fi

PBS_ENV_FILE="${HOME}/.pbsenv"
COBALT_ENV_FILE="${HOME}/.cobaltenv"
SLURM_ENV_FILE="${HOME}/.slurmenv"

HEADER="┌─────────────────────────────────────────────────────────────────────┐\n"
FOOTER="└─────────────────────────────────────────────────────────────────────┘\n"

function whereAmI() {
    python3 -c 'import os; print(os.getcwd())'
}

function join_by() {
    local d=${1-} f=${2-}
    if shift 2; then
        printf %s "$f" "${@/#/$d}"
    fi
}


function save_pbs_env() {
    # if [[ $(hostname) == x1* || $(hostname) == x3* || $(hostname) == x4* ]]; then
    # if [[ "$#" == 1]]; then
    #     jobenv_file="$1"
    #     echo "Caught jobenv_file: ${jobenv_file}"
    # elif [[ "$#" == 2 ]]; then
    #     jobenv_file="$1"
    #     hostfile="$2"
    #     echo "Caught jobenv_file: ${jobenv_file}"
    #     echo "Caught hostfile: ${hostfile}"
    # else
    #     jobenv_file="${PBS_ENV_FILE}"
    #     hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
    # fi
    # if [[ -n "${PBS_NODEFILE}" ]]; then
    if [[ "$#" == 0 ]]; then
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    elif [[ "$#" == 1 ]]; then
        hostfile="$1"
    elif [[ "$#" == 2 ]]; then
        hostfile="$1"
        jobenv_file="$2"
    else
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    fi
    # printf "[save_pbs_env] Caught hostfile: %s\n" "${hostfile}"
    # printf "[save_pbs_env] Caught jobenv_file: %s\n" "${jobenv_file}"
    if [[ -n $(printenv | grep PBS_JOBID ) ]]; then
        PBS_VARS=$(env | grep PBS)
        # PBS_VARS+=("${hostfile}")
        # PBS_VARS+=("${jobenv_file}")
        echo "${PBS_VARS[*]}" > "${jobenv_file}"
        # export HOSTFILE="${HOSTFILE:-${PBS_NODEFILE}}"
        if [[ "${hostfile}" != "${PBS_NODEFILE:-}" ]]; then
            printf "[!! save_pbs_env] Caught HOSTFILE != PBS_NODEFILE \n"
            printf "[!! save_pbs_env] HOSTFILE: %s\n" "${hostfile}"
            printf "[!! save_pbs_env] PBS_NODEFILE: %s\n" "${PBS_NODEFILE}"
        fi
        # export JOBENV_FILE="${PBS_ENV_FILE}"
        sed -i 's/^PBS/export\ PBS/g' "${jobenv_file}"
        sed -i 's/^HOSTFILE/export\ HOSTFILE/g' "${jobenv_file}"
        num_hosts=$(get_num_hosts "${hostfile}")
        num_gpus_per_host=$(get_num_gpus_per_host)
        num_gpus=$(( num_hosts * num_gpus_per_host ))
        # getNumHosts "${hostfile}"

        # getNumGPUs
        # NGPUS="$(( NHOSTS * NGPU_PER_HOST ))"
        export DIST_LAUNCH="mpiexec --verbose --envall -n ${num_gpus} -ppn ${num_gpus_per_host} --hostfile ${hostfile} --cpu-bind depth -d 16"
        export ezlaunch="${DIST_LAUNCH}"
    fi
    export JOBENV_FILE="${jobenv_file}"
    export HOSTFILE="${hostfile}"
    # printf "Using JOBENV_FILE: %s\n" "${JOBENV_FILE}"
    # printf "Using HOSTFILE: %s\n" "${HOSTFILE}"
}


function save_slurm_env() {
    if [[ $(hostname) == nid* || $(hostname) == login* ]]; then
        echo "│ Saving SLURM_* to ${SLURM_ENV_FILE}"
        SLURM_VARS=$(env | grep SLU)
        echo "${SLURM_VARS[*]}" > "${SLURM_ENV_FILE}"
        export HOSTFILE="${HOME}/.slurm-nodefile"
        export JOBENV_FILE="${SLURM_ENV_FILE}"
        export SLURM_NODES="${SLURM_NODES}"
        SLURM_NODES=$(scontrol show hostname $SLURM_NODELIST)
        printf "%s\n" "${SLURM_NODES[@]}" > $HOSTFILE
        sed -i 's/^SLURM/export\ SLURM/g' "${SLURM_ENV_FILE}"
        sed -i 's/(x2)//g' "${SLURM_ENV_FILE}"
        export DIST_LAUNCH="srun --gpus ${NGPUS} --gpus-per-node ${NGPU_PER_HOST} -N ${NHOSTS} -n ${NGPUS} -l -u --verbose"  #  "$@"
        export ezlaunch="${DIST_LAUNCH}"
    fi
}


# function envSave() {
#     echo "┌───────────────────────────────────────────────────────────────────"
#     if [[ $(hostname) == x3* ]]; then
#         echo "│ Saving PBS env to ${PBS_ENV_FILE} from ${HOSTNAME}"
#         save_pbs_env
#     elif [[ $(hostname) == theta* ]]; then
#         echo "│ Saving COBALT env to ${COBALT_ENV_FILE} from ${HOSTNAME}"
#         saveCOBALTenv
#     elif [[ $(hostname) == nid* || $(hostname) == login* ]]; then
#         save_slurm_env
#     fi
# }

function setupHost() {
    if [[ "$#" == 0 ]]; then
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    elif [[ "$#" == 1 ]]; then
        hostfile="$1"
    elif [[ "$#" == 2 ]]; then
        hostfile="$1"
        jobenv_file="$2"
    else
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    fi
    printf "[setupHost] Caught jobenv_file: %s\n" "${jobenv_file}"
    printf "[setupHost] Caught hostfile: %s\n" "${hostfile}"
    printf "${HEADER}"
    printf "│ [${YELLOW}savejobenv${RESET}]:\n"
    printf "│     • Writing PBS vars to: ${YELLOW}${jobenv_file}${RESET}\n"
    printf "${FOOTER}"
    if [[ $(hostname) == x3* ]]; then
        export GPU_TYPE="NVIDIA"
        # export HOSTFILE="${HOSTFILE:-${PBS_NODEFILE}}"
        save_pbs_env "$@"
    elif [[ $(hostname) == x4* || $(hostname) == x1* ]]; then
        export GPU_TYPE="INTEL"
        # export HOSTFILE="${HOSTFILE:-${PBS_NODEFILE}}"
        export NGPU_PER_TILE=6
        export NTILE_PER_HOST=2
        export NGPU_PER_HOST=$(( NGPU_PER_TILE * NTILE_PER_HOST ))
        save_pbs_env "$@"
    elif [[ $(hostname) == nid* || $(hostname) == login* ]]; then 
        export GPU_TYPE="NVIDIA"
        export HOSTFILE="${HOME}/.slurm-nodefile"
        save_slurm_env
    else
        echo "│ Unexpected hostname: ${hostname}"
        export GPU_TYPE="NONE"
        HOSTFILE="hostfile"
        hostname > "${HOSTFILE}"
    fi
}

function printHosts() {
    if [[ "$#" == 0 ]]; then
        hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
    elif [[ "$#" == 1 ]]; then
        hostfile="$1"
    else
        hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
    fi
    counter=0
    # for f in $(/bin/cat "${HOSTFILE:-${PBS_NODEFILE}}"); do
    for f in $(/bin/cat "${hostfile}"); do
        # printf "│     • [host:%s] - \e[1;34m%s\e[0m\n" "${counter}" "${f}"
        printf "│     • [host:%s] - ${CYAN}%s${RESET}\n" "${counter}" "${f}"
        counter=$((counter+1))
    done
}


function getNumXPUs() {
    python3 -c 'import intel_extension_for_pytorch as ipex; print(ipex.xpu.device_count())'
}

function getNumGPUsNVIDIA() {
    nGPU=$(nvidia-smi -L | wc -l)
    export NGPU_PER_HOST="${nGPU}"
    echo "${nGPU}"
}

# function getNumGPUs1() {
#     if [[ $(hostname) == x4* || $(hostname) == x1* ]]; then
#         export NGPU_PER_HOST=12
#     elif [[ $(hostname) == x3* ]]; then
#         getNumGPUsNVIDIA
#     else
#         echo "Unknown host $(hostname)"
#         getNumGPUsNVIDIA
#     fi
# }

get_num_gpus_per_host() {
    if [[ $(hostname) == x4* || $(hostname) == x1* ]]; then
        # export NGPU_PER_HOST=12
        ngpu_per_host=12
    # elif [[ $(hostname) == x3* ]]; then
    #     ngpu_per_host=$(getNumGPUsNVIDIA)
    else
        # echo "Unknown host $(hostname)"
        ngpu_per_host=$(getNumGPUsNVIDIA)
    fi
    export NGPU_PER_HOST="${ngpu_per_host}"
    echo "${ngpu_per_host}"
}

# function getNumHosts1() {
#     # export HOSTFILE="${HOSTFILE:-${PBS_NODEFILE}}"
#     if [[ "$#" == 0 ]]; then
#         hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
#     elif [[ "$#" == 1 ]]; then
#         hostfile="$1"
#     else
#         hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
#     fi
#     # if [[ -z "${hostfile}" ]]; then
#     if [[ -n "${hostfile}" ]]; then
#         nhosts=$(wc -l < "${hostfile}")
#     elif [[ -n "${SLURM_NNODES:-}" ]]; then
#         nhosts=${SLURM_NNODES:-1}
#     else
#         # printf "[getNumHosts] Unable to locate %s\n"  "${hostfile}"
#         # printf "[getNumHosts] received arguments: %s\n" "$@"
#         # printf "[getNumHosts] [!! ERROR] Setting nhosts: 1\n"
#         nhosts=1
#     fi
#     if [[ -n "${nhosts}" ]]; then
#         export NHOSTS="${nhosts}"
#         # printf "[getNumHosts] caught %s from %s\n" "${nhosts}" "${hostfile}"
#     # else
#     #     printf "[getNumHosts]"
#     fi
#     echo "${nhosts}"
# }

get_num_hosts() {
    if [[ "$#" == 0 ]]; then
        hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
    elif [[ "$#" == 1 ]]; then
        hostfile="$1"
    else
        hostfile="${HOSTFILE:-${PBS_NODEFILE:-${NODEFILE}}}"
    fi
    if [[ -n "${hostfile}" ]]; then
        nhosts=$(wc -l < "${hostfile}")
    elif [[ -n "${SLURM_NNODES:-}" ]]; then
        nhosts=${SLURM_NNODES:-1}
    else
        nhosts=1
    fi
    if [[ -n "${nhosts}" ]]; then
        export NHOSTS="${nhosts}"
    fi
    echo "${nhosts}"
}

get_num_gpus_total() {
    num_hosts=$(get_num_hosts "$@")
    num_gpus_per_host=$(get_num_gpus_per_host)
    num_gpus=$(( num_hosts * num_gpus_per_host ))
    echo "${num_gpus}"
}




function writeJobInfo() {
    if [[ "$#" == 0 ]]; then
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    elif [[ "$#" == 1 ]]; then
        hostfile="$1"
    elif [[ "$#" == 2 ]]; then
        hostfile="$1"
        jobenv_file="$2"
    else
        hostfile="${HOSTFILE:-${PBS_NODEFILE}}"
        jobenv_file="${JOBENV_FILE:-${PBS_ENV_FILE}}"
    fi
    # printf "[writeJobInfo] Caught jobenv_file: %s\n" "${jobenv_file}"
    # printf "[writeJobInfo] Caught hostfile: %s\n" "${hostfile}"
    num_hosts=$(get_num_hosts "${hostfile}")
    num_gpus_per_host=$(get_num_gpus_per_host)
    # getNumGPUs
    num_gpus="$(( num_hosts * num_gpus_per_host ))"
    HOSTS=$(join_by ', ' $(/bin/cat ${hostfile}))
    export NHOSTS="${num_hosts}"
    export NGPU_PER_HOST="${num_gpus_per_host}"
    export NGPUS="${num_gpus}"
    {
        echo "export HOSTFILE=${hostfile}"
        echo "export NHOSTS=${NHOSTS}"
        echo "export NGPU_PER_HOST=${NGPU_PER_HOST}"
        echo "export NGPUS=${NGPUS}"
        echo "alias LAUNCH='${DIST_LAUNCH}'"
    } >> "${jobenv_file}"
    export LAUNCH="${DIST_LAUNCH}"
    export ezlaunch="${DIST_LAUNCH}"
    # echo "export HOSTFILE=${hostfile}" >> "${JOBENV_FILE}"
    alias launch="${LAUNCH}"
    printf "${HEADER}"
    printf "│ [${CYAN}HOSTS${RESET}]:\n"
    printHosts
    printf "${FOOTER}"
    printf "${HEADER}"
    printf "│ [${MAGENTA}DIST INFO${RESET}]:\n"
    printf "│     • HOSTFILE=${MAGENTA}${hostfile}${RESET}\n"
    printf "│     • NHOSTS=$NHOSTS\n"
    printf "│     • NGPU_PER_HOST=$NGPU_PER_HOST\n"
    printf "│     • NGPUS=${MAGENTA}$NGPUS${RESET}\n"
    printf "${FOOTER}"
    printf "${HEADER}"
    printf "│ [${GREEN}LAUNCH${RESET}]:\n"
    printf "│     • To launch across all available GPUs, use:\n"
    printf "│       '${GREEN}launch${RESET}' ( = ${GREEN}%s${RESET} )\n" "${LAUNCH}"
    printf "${FOOTER}"
    # echo "┌────────────────────────────────────────────────────────────────────────────────"
    # echo "│ YOU ARE HERE: $(whereAmI)"
    # echo "│ Run 'source ./bin/getjobenv' in a NEW SHELL to automatically set env vars      "
    # echo "└────────────────────────────────────────────────────────────────────────────────"
    export NHOSTS="${NHOSTS}"
    export NGPU_PER_HOST="${NGPU_PER_HOST}"
    export NGPUS="${NGPUS}"
}

saveDeepSpeedEnv() {
    echo "Saving to .deepspeed_env"
    echo "PATH=${PATH}" > .deepspeed_env
    [ $LD_LIBRARY_PATH ] && echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> .deepspeed_env
    [ $CFLAGS ] && echo "CFLAGS=${CFLAGS}" >> .deepspeed_env
    [ $PYTHONUSERBASE ] && echo "PYTHONUSERBASE=$PYTHONUSERBASE" >> .deepspeed_env
    [ $http_proxy ] && echo "http_proxy=${http_proxy}" >> .deepspeed_env
    [ $https_proxy ] && echo "https_proxy=${https_proxy}" >> .deepspeed_env
}


main() {
    setupHost "$@"
    writeJobInfo "$@"
}

# args="$@"
#
# main "${args}" 1> /dev/null
# main "${args}"
main "$@"
